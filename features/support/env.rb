# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

# frozen_string_literal: true

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise 'You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it.'
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

Capybara.register_driver :firefox do |app|
  profile = Selenium::WebDriver::Firefox::Profile.new
  opts = Selenium::WebDriver::Firefox::Options.new(profile: profile)
  Capybara::Selenium::Driver.new(app, browser: :firefox, options: opts)
end

Capybara.register_driver :headless_chrome do |app|
  opts = Selenium::WebDriver::Chrome::Options.new
  opts.add_argument '--start-maximized'
  opts.add_argument '--disable-infobars'
  opts.add_argument '--headless'
  Capybara::Selenium::Driver.new(app, browser: :chrome, options: opts)
end

Capybara.register_driver :remote_chrome do |app|
  capabilities = Selenium::WebDriver::Remote::Capabilities.chrome
  Capybara::Selenium::Driver.new(app, browser: :chrome, url: 'http://localhost:9515', desired_capabilities: capabilities)
end

Capybara.register_driver :selenium do |app|
  browser_options = Selenium::WebDriver::Firefox::Options.new
  browser_options.args << '--headless' unless ENV['HEADLESS'] == 'no'
  Capybara::Selenium::Driver.new(
    app,
    browser: :firefox,
    options: browser_options
  )
end

Capybara.register_driver :selenium_chrome_in_container do |app|
  Capybara::Selenium::Driver.new app, browser: :remote, url: 'http://selenium_chrome:4444/wd/hub', desired_capabilities: :chrome
end

Capybara.register_driver :headless_selenium_chrome_in_container do |app|
  Capybara::Selenium::Driver.new(
    app,
    browser: :remote,
    url: 'http://selenium_chrome:4444/wd/hub',
    desired_capabilities: Selenium::WebDriver::Remote::Capabilities.chrome(chromeOptions: { args: %w[headless disable-gpu] })
  )
end

Capybara.register_driver :selenium_firefox_in_container do |app|
  Capybara::Selenium::Driver.new(app,
                                 browser: :remote,
                                 url: 'http://selenium_firefox:4444/wd/hub',
                                 desired_capabilities: :firefox)
end

Capybara.register_driver :headless_selenium_firefox_in_container do |app|
  Capybara::Selenium::Driver.new(
    app,
    browser: :remote,
    url: 'http://selenium_firefox:4444/wd/hub',
    desired_capabilities: Selenium::WebDriver::Remote::Capabilities.firefox(
      opts: { args: ['-headless'] }
    )
  )
end

if ENV['CAPYBARA_JAVASCRIPT_DRIVER']
  Capybara.javascript_driver = ENV['CAPYBARA_JAVASCRIPT_DRIVER'].to_sym
else
  Capybara.javascript_driver = :selenium
  # Capybara.javascript_driver = :headless_selenium_chrome_in_container
  # Capybara.javascript_driver = :headless_selenium_firefox_in_container
  # Capybara.javascript_driver = :selenium_firefox_in_container

  Capybara.server_host = '0.0.0.0'

  Capybara.server_port = 4000

  Capybara.app_host = 'http://app:4000'

  Capybara.always_include_port = true
end

if ENV['BROWSER']
  DatabaseCleaner.strategy = :truncation
  Capybara.default_driver = ENV['BROWSER'].to_sym
end
